# Generated by Django 5.1.7 on 2025-03-28 23:23

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('inventory', '0001_initial'),
        ('shop', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='VendorCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Vendor Categories',
            },
        ),
        migrations.CreateModel(
            name='PurchaseRequisition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requisition_number', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_approval', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('converted', 'Converted to PO'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('date_required', models.DateField()),
                ('justification', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('total_estimated_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_requisitions', to='accounts.customuser')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_requisitions', to='accounts.customuser')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_requisitions', to='inventory.warehouse')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseRequisitionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('estimated_unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
                ('requisition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='procurement.purchaserequisition')),
                ('variation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.productvariation')),
            ],
        ),
        migrations.CreateModel(
            name='RFQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rfq_number', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent to Vendors'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('issue_date', models.DateField(default=django.utils.timezone.now)),
                ('response_deadline', models.DateField()),
                ('expected_delivery_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('terms_and_conditions', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_rfqs', to='accounts.customuser')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_rfqs', to='accounts.customuser')),
                ('requisition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rfqs', to='procurement.purchaserequisition')),
            ],
            options={
                'verbose_name': 'RFQ',
                'verbose_name_plural': 'RFQs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RFQItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
                ('requisition_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rfq_items', to='procurement.purchaserequisitionitem')),
                ('rfq', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='procurement.rfq')),
                ('variation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.productvariation')),
            ],
            options={
                'unique_together': {('rfq', 'product', 'variation')},
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_type', models.CharField(choices=[('manufacturer', 'Manufacturer'), ('distributor', 'Distributor'), ('wholesaler', 'Wholesaler'), ('retailer', 'Retailer'), ('service', 'Service Provider')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('on_hold', 'On Hold'), ('blacklisted', 'Blacklisted'), ('pending_approval', 'Pending Approval')], default='active', max_length=20)),
                ('tax_id', models.CharField(blank=True, max_length=50, null=True)),
                ('account_number', models.CharField(blank=True, max_length=50, null=True)),
                ('credit_terms', models.CharField(blank=True, max_length=100, null=True)),
                ('credit_limit', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('quality_rating', models.PositiveSmallIntegerField(blank=True, help_text='Rating from 1-10', null=True)),
                ('delivery_rating', models.PositiveSmallIntegerField(blank=True, help_text='Rating from 1-10', null=True)),
                ('price_rating', models.PositiveSmallIntegerField(blank=True, help_text='Rating from 1-10', null=True)),
                ('certifications', models.TextField(blank=True, help_text='List any vendor certifications', null=True)),
                ('onboarding_date', models.DateField(blank=True, null=True)),
                ('last_review_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supplier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vendor_profile', to='inventory.supplier')),
                ('categories', models.ManyToManyField(blank=True, related_name='vendors', to='procurement.vendorcategory')),
            ],
        ),
        migrations.CreateModel(
            name='RFQVendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('invited', 'Invited'), ('acknowledged', 'Acknowledged'), ('declined', 'Declined'), ('quote_submitted', 'Quote Submitted'), ('selected', 'Selected'), ('rejected', 'Rejected')], default='invited', max_length=20)),
                ('date_invited', models.DateField(default=django.utils.timezone.now)),
                ('date_acknowledged', models.DateField(blank=True, null=True)),
                ('date_quote_received', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('quote_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('total_quoted_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('quoted_lead_time_days', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rfq', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendors', to='procurement.rfq')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rfqs', to='procurement.vendor')),
            ],
        ),
        migrations.AddField(
            model_name='purchaserequisitionitem',
            name='suggested_vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='suggested_items', to='procurement.vendor'),
        ),
        migrations.CreateModel(
            name='ProcurementAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('attachment_type', models.CharField(choices=[('document', 'Document'), ('image', 'Image'), ('contract', 'Contract'), ('quote', 'Quote'), ('specification', 'Specification'), ('other', 'Other')], max_length=20)),
                ('file', models.FileField(upload_to='procurement/attachments/')),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('purchase_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='inventory.purchaseorder')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_attachments', to='accounts.customuser')),
                ('requisition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='procurement.purchaserequisition')),
                ('rfq', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='procurement.rfq')),
                ('rfq_vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='procurement.rfqvendor')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='procurement.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='VendorContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_type', models.CharField(choices=[('primary', 'Primary'), ('billing', 'Billing'), ('shipping', 'Shipping'), ('sales', 'Sales'), ('technical', 'Technical'), ('customer_service', 'Customer Service'), ('other', 'Other')], max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('job_title', models.CharField(blank=True, max_length=100, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('mobile', models.CharField(blank=True, max_length=30, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='procurement.vendor')),
            ],
        ),
        migrations.AddField(
            model_name='rfqvendor',
            name='contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rfqs', to='procurement.vendorcontact'),
        ),
        migrations.CreateModel(
            name='VendorPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_date', models.DateField()),
                ('quality_rating', models.PositiveSmallIntegerField(help_text='Rating from 1-10')),
                ('delivery_rating', models.PositiveSmallIntegerField(help_text='Rating from 1-10')),
                ('price_rating', models.PositiveSmallIntegerField(help_text='Rating from 1-10')),
                ('service_rating', models.PositiveSmallIntegerField(help_text='Rating from 1-10')),
                ('on_time_delivery_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage', max_digits=5, null=True)),
                ('quality_rejection_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage', max_digits=5, null=True)),
                ('response_time_days', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('areas_of_improvement', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('evaluator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vendor_evaluations', to='accounts.customuser')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_records', to='procurement.vendor')),
            ],
            options={
                'ordering': ['-evaluation_date'],
            },
        ),
        migrations.CreateModel(
            name='VendorPriceList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('effective_date', models.DateField()),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='procurement/price_lists/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_price_lists', to='accounts.customuser')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_lists', to='procurement.vendor')),
            ],
            options={
                'ordering': ['-effective_date'],
            },
        ),
        migrations.CreateModel(
            name='RFQVendorItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('lead_time_days', models.PositiveIntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_selected', models.BooleanField(default=False)),
                ('rfq_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendor_quotes', to='procurement.rfqitem')),
                ('rfq_vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='procurement.rfqvendor')),
            ],
            options={
                'unique_together': {('rfq_vendor', 'rfq_item')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='purchaserequisitionitem',
            unique_together={('requisition', 'product', 'variation')},
        ),
        migrations.AlterUniqueTogether(
            name='rfqvendor',
            unique_together={('rfq', 'vendor')},
        ),
        migrations.CreateModel(
            name='VendorPriceListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('minimum_order_quantity', models.PositiveIntegerField(default=1)),
                ('price_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='procurement.vendorpricelist')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.product')),
                ('variation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.productvariation')),
            ],
            options={
                'unique_together': {('price_list', 'product', 'variation')},
            },
        ),
        migrations.CreateModel(
            name='VendorProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_product_code', models.CharField(blank=True, max_length=100, null=True)),
                ('vendor_product_name', models.CharField(blank=True, help_text="The vendor's name for this product", max_length=255, null=True)),
                ('standard_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('minimum_order_quantity', models.PositiveIntegerField(default=1)),
                ('lead_time_days', models.PositiveIntegerField(blank=True, null=True)),
                ('is_preferred_vendor', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('last_purchase_date', models.DateField(blank=True, null=True)),
                ('last_purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendor_products', to='shop.product')),
                ('variation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vendor_products', to='shop.productvariation')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='procurement.vendor')),
            ],
            options={
                'unique_together': {('vendor', 'product', 'variation')},
            },
        ),
    ]
